---
import { getCollection } from "astro:content";
import { CopyButton } from "@components/CopyButton";


const guides = await getCollection("guides");
const orderedGuides = guides.sort((a, b) => a.data.id - b.data.id)
---

<h3 id="guide" class="text-center text-3xl md:text-6xl text-slate-800/90 font-extrabold underline animate-fade motion-reduce:animate-none">Endpoints Disponibles</h3>

<article  class="fade-scroll flex flex-col gap-4 items-center md:items-baseline">
    {orderedGuides.length === 0 ? (
      <p class="bg-red-400 text-white text-xl text-center font-bold">
        No hay datos disponibles.
      </p>
    ) : (
      orderedGuides.map((step) => {
        const { data } = step
        const { title, url, method, description, example, img, id } = data;

        const childRight = id % 2 === 0  ? 'lg:self-end initial-right' : ''; 

        return (

          <section class={`container-animation flex items-center gap-8 ${childRight} `}>

            <div class="self-end 2xl:block hidden">
              {
                id % 2 === 0 ? <img src="/arrowLeft.svg" class="arrow w-[30rem] h-[30rem] initial-right" /> : ''
              }
            </div>
            
            <div class={`container h-auto bg-white rounded-md shadow-2xl hover:scale-105 transition-all lg:w-3xl flex flex-col gap-6`}>

              <h4 class="text-2xl lg:text-4xl font-extrabold text-slate-700 text-center leading-tight">{title}</h4>

              <section class="container-2 bg-gray-900/10 flex flex-col rounded-md shadow-2xs">

                <div class="container-3 h-auto bg-white rounded-t-md flex flex-col sm:flex sm:flex-row items-start sm:items-center">
                  <p class="text-xs lg:text-lg font-bold text-slate-900 text-nowrap">
                    - URL:
                  </p>
                  <span class="url text-xs lg:text-base font-bold text-slate-700 break-all">{url}</span>
                </div>

                <div class="container-3 bg-white flex items-center">
                  <p class="text-xs lg:text-lg font-bold text-slate-900 text-nowrap">
                    - Método: 
                  </p>
                  <span class="text-xs lg:text-base font-bold text-slate-700 break-all">{method}</span>
                </div>

                <div class="container-3 bg-white flex flex-col sm:flex sm:flex-row items-start sm:items-center">
                  <p class="text-xs lg:text-lg font-bold text-slate-900 text-nowrap">
                    - Descripción: 
                  </p>
                  <span class="description text-xs lg:text-base font-bold text-slate-700 break-words">{description}</span>
                </div>

                <div class="w-auto container-3 bg-white rounded-b-md flex flex-col sm:flex sm:flex-row items-center justify-between">
                  <div class="flex flex-col sm:flex sm:flex-row items-start sm:items-center">
                    <p class="text-xs lg:text-lg font-bold text-slate-900 text-nowrap whitespace-nowrap">
                    - Ejemplo de solicitud:
                    </p>
                    <span class="example text-xs lg:text-base font-bold text-slate-700 break-all">{example}</span>
                  </div>

                  <CopyButton text={example} client:load/>
                  
                </div>
                
              </section>
              
              <div class="h-[1px] w-12 bg-gray-500 rotate-90 self-center"></div>

              <section class="container-2 bg-gray-900/10 rounded-md shadow-2xs flex items-center justify-center">  

                <img 
                  class="rounded-md"
                  src={img} 
                  alt={description} 
                  loading="lazy" />

              </section>

            </div>
            
            <div class="self-end 2xl:block  hidden">
              {
                id % 2 != 0 && id != 5 ? <img src="/arrowRight.svg" class="arrow w-[30rem] h-[30rem] "/> : ''
              }
            </div>
          </section>
        );
      })
    )
    }
</article>


<style>

  h3 {
    margin-top: 8rem;
  }

  @media (width <= 48rem) {
    h3 {
      margin-top: 2rem;
    }
  }

  article {
    margin-top: 3rem;
    padding: 0 3rem;
  }
 
  @media (width >= 768px) {
		article {
			padding: 0 10rem;
		}
	}

  @media (width <= 40rem) {
    .example {
      padding: 0 0.5rem 1rem 0.5rem;
    }
  }

  @media (width <= 40rem) {
    .description {
      padding: 0 0.5rem;
    }
  }

  @media (width <= 40rem) {
    .url {
      padding: 0 0.5rem;      
    }
  }

  h4 {
    padding-top: 1.5rem;
  }

  .container{
    margin: 4rem 0rem;
    padding: 1rem;
  }

  .container-2 {
    padding: 0.5rem;
  }

  .container-3 {
    padding: 0.5rem 0 0.5rem 0;
  }

  p {
    padding: 0.5rem;
  }

  
</style>


<script>
import { animate } from "framer-motion";

// Seleccionar todos los contenedores
const containers = document.querySelectorAll(".container-animation");
const arrows = document.querySelectorAll(".arrow");

// Configurar el IntersectionObserver
const observer = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        // Verificar si el contenedor está en la columna 2 (usa una clase como referencia)
        const isInSecondColumn = entry.target.classList.contains("initial-right");

        // Determinar la animación con base en la columna
        const animationDirection = isInSecondColumn
          ? ["translateX(150px)", "translateX(0)"] // Animación desde la derecha
          : ["translateX(-150px)", "translateX(0)"]; // Animación desde la izquierda

        // Aplicar la animación
        animate(
          entry.target,
          { opacity: [0, 1], transform: animationDirection },
          { duration: 0.8 } // Duración de la animación
        );


     

        // Dejar de observar el elemento
        observer.unobserve(entry.target);
      }
    });
  },
  { threshold: 0.01 } // Activar cuando el 1% del elemento sea visible
);

// Agregar el observador a cada contenedor
containers.forEach((container) => observer.observe(container));


// ANIMACIONES DE ARROWS
const observeArrow = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {

        animate(
          entry.target,
          { opacity: [0, 1]},
          { duration: 1 }
        );

        observeArrow.unobserve(entry.target)
      }
    });
  },
  { threshold: 0.01 }
);

arrows.forEach((arrow) => observer.observe(arrow));

</script>
